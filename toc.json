{
  "projects": [
    {
      "name": "dom",
      "title": "tempo-dom",
      "description": "Fully-typed frontend framework alternative to React and Angular",
      "version": "0.17.0",
      "keywords": [
        "tempo",
        "ui",
        "framework",
        "typescript",
        "dom",
        "angular-alternative",
        "react-alternative"
      ],
      "content": "<p>This is the Dom implementation for <code>tempo</code>.</p>"
    },
    {
      "name": "std",
      "title": "tempo-std",
      "description": "Std library for TypeScript. Natural complement to the tempo libs.",
      "version": "0.5.0",
      "keywords": [
        "tempo",
        "framework",
        "std",
        "library"
      ],
      "content": "<p>The standard library for Tempo and for TypeScript.</p>"
    },
    {
      "name": "core",
      "title": "tempo-core",
      "description": "Core types for Tempo. The tempo architecture encourages a unilateral flow in a practical way.",
      "version": "1.7.0",
      "keywords": [
        "tempo",
        "framework",
        "ui",
        "library"
      ],
      "content": "<p><code>tempo-core</code> includes the basic types and building blocks for <code>tempo</code> implementations.</p>\n<p>The <code>tempo</code> concept is quite simple. You describe your UI creating templates. A template has a <code>render</code> method that takes a <code>context</code> (provide the DOM context for example) and a <code>state</code> (the data to render).</p>\n<p>The side-effect of <code>render</code> is to create a piece of UI and return a new <code>View</code> instance to control it.</p>\n<p><code>View</code> has a method <code>destroy</code> and when it is a <code>Dynamic</code> view a <code>change(state: State)</code> method.</p>"
    },
    {
      "name": "store",
      "title": "tempo-store",
      "description": "Super simple state management library",
      "version": "1.2.2",
      "keywords": [
        "tempo",
        "unidirectional-flow",
        "property",
        "store",
        "state-management",
        "typescript"
      ],
      "content": "<p><code>tempo-store</code> contains utilities to wrap a value into a <code>Store</code> instance and track its lifecycle.</p>\n<h2 id=\"property\">Property</h2>\n<p>A <code>Property</code> instance wraps a single generic value of type <code>T</code>. It exposes a field <code>observable</code> where you can add your own listeners. These will be triggered any time <code>Property.set</code> is invoked but only if the value differs from its previous state. To control such behavior it is possible to pass a function <code>equal</code>. The default implementation performs a structural equality test.</p>\n<h2 id=\"store\">Store</h2>\n<p>A <code>Store</code> instance wraps a property and adds a <code>reducer</code> function to the mix. With the <code>reducer</code> it is possible to influence the value of store by invoking <code>process(action: Action)</code>. Whenver that method is called, <code>reducer(currentState: State, action: Action): State</code> is invoked and the value of store is accordinlgy updated. It is possible to monitor state changes and action triggers by adding listeners to the <code>observable</code> field. Note that these listeners should have the shape <code>(state: State, action: Action, changed: boolean) =&gt; void</code>.</p>"
    },
    {
      "name": "paperjs",
      "title": "tempo-paper",
      "description": "Integration of PaperJS api using Tempo to create a declarative Document Object Model.",
      "version": "0.4.0",
      "keywords": [
        "tempo",
        "paperjs",
        "2d",
        "graphics"
      ],
      "content": "<p>Tempo Paper.JS allows you to use the same principles of Tempo DOM in Paper.JS.</p>"
    }
  ],
  "demos": [
    {
      "path": "todomvc",
      "version": "1.0.0",
      "title": "ToDo MVC App",
      "description": "The classic ToDoMVC sample application."
    },
    {
      "path": "hnpwa",
      "version": "1.0.0",
      "title": "Hacker News Progressive Web App",
      "description": "Client for Hacker New built using Tempo. Heavily inspired on the Elm implementation."
    },
    {
      "path": "readme",
      "version": "1.0.0",
      "title": "Readme Example",
      "description": "Documentation site for Tempo."
    },
    {
      "path": "paper",
      "version": "1.0.0",
      "title": "Paper JS Integration",
      "description": "Example of integration between the HTML DOM and the Paper DOM represented in Tempo."
    },
    {
      "path": "benchmark",
      "version": "1.0.0",
      "title": "Performance Benchmark",
      "description": "Tool to measure performance improvements/regressions across versions."
    }
  ],
  "pages": [
    {
      "path": "index.html",
      "title": "Home"
    },
    {
      "path": "elements.html",
      "title": "Common Elements"
    },
    {
      "path": "faq.html",
      "title": "FAQ"
    }
  ],
  "sections": {},
  "apis": {
    "core": [
      {
        "path": "template.html",
        "id": "template.html",
        "title": "template",
        "type": "module"
      },
      {
        "path": "value.html",
        "id": "value.html",
        "title": "value",
        "type": "module"
      },
      {
        "path": "view.html",
        "id": "view.html",
        "title": "view",
        "type": "module"
      }
    ],
    "dom": [
      {
        "path": "adapter.html",
        "id": "adapter.html",
        "title": "adapter",
        "type": "module"
      },
      {
        "path": "component.html",
        "id": "component.html",
        "title": "component",
        "type": "module"
      },
      {
        "path": "context.html",
        "id": "context.html",
        "title": "context",
        "type": "module"
      },
      {
        "path": "element.html",
        "id": "element.html",
        "title": "element",
        "type": "module"
      },
      {
        "path": "filter.html",
        "id": "filter.html",
        "title": "filter",
        "type": "module"
      },
      {
        "path": "for_each.html",
        "id": "for_each.html",
        "title": "for_each",
        "type": "module"
      },
      {
        "path": "fragment.html",
        "id": "fragment.html",
        "title": "fragment",
        "type": "module"
      },
      {
        "path": "hold_state.html",
        "id": "hold_state.html",
        "title": "hold_state",
        "type": "module"
      },
      {
        "path": "html.html",
        "id": "html.html",
        "title": "html",
        "type": "module"
      },
      {
        "path": "iterate.html",
        "id": "iterate.html",
        "title": "iterate",
        "type": "module"
      },
      {
        "path": "lazy.html",
        "id": "lazy.html",
        "title": "lazy",
        "type": "module"
      },
      {
        "path": "map.html",
        "id": "map.html",
        "title": "map",
        "type": "module"
      },
      {
        "path": "match.html",
        "id": "match.html",
        "title": "match",
        "type": "module"
      },
      {
        "path": "portal.html",
        "id": "portal.html",
        "title": "portal",
        "type": "module"
      },
      {
        "path": "scoped_styles.html",
        "id": "scoped_styles.html",
        "title": "scoped_styles",
        "type": "module"
      },
      {
        "path": "svg.html",
        "id": "svg.html",
        "title": "svg",
        "type": "module"
      },
      {
        "path": "template.html",
        "id": "template.html",
        "title": "template",
        "type": "module"
      },
      {
        "path": "tempo.html",
        "id": "tempo.html",
        "title": "tempo",
        "type": "module"
      },
      {
        "path": "text.html",
        "id": "text.html",
        "title": "text",
        "type": "module"
      },
      {
        "path": "unsafe_html.html",
        "id": "unsafe_html.html",
        "title": "unsafe_html",
        "type": "module"
      },
      {
        "path": "until.html",
        "id": "until.html",
        "title": "until",
        "type": "module"
      },
      {
        "path": "value.html",
        "id": "value.html",
        "title": "value",
        "type": "module"
      },
      {
        "path": "when.html",
        "id": "when.html",
        "title": "when",
        "type": "module"
      },
      {
        "path": "utils/attributes_mapper.html",
        "id": "utils/attributes_mapper.html",
        "title": "utils/attributes_mapper",
        "type": "module"
      },
      {
        "path": "utils/dom.html",
        "id": "utils/dom.html",
        "title": "utils/dom",
        "type": "module"
      },
      {
        "path": "utils/set_attribute.html",
        "id": "utils/set_attribute.html",
        "title": "utils/set_attribute",
        "type": "module"
      }
    ],
    "paperjs": [
      {
        "path": "adapter.html",
        "id": "adapter.html",
        "title": "adapter",
        "type": "module"
      },
      {
        "path": "component.html",
        "id": "component.html",
        "title": "component",
        "type": "module"
      },
      {
        "path": "compound_path.html",
        "id": "compound_path.html",
        "title": "compound_path",
        "type": "module"
      },
      {
        "path": "context.html",
        "id": "context.html",
        "title": "context",
        "type": "module"
      },
      {
        "path": "filter.html",
        "id": "filter.html",
        "title": "filter",
        "type": "module"
      },
      {
        "path": "for_each.html",
        "id": "for_each.html",
        "title": "for_each",
        "type": "module"
      },
      {
        "path": "fragment.html",
        "id": "fragment.html",
        "title": "fragment",
        "type": "module"
      },
      {
        "path": "group.html",
        "id": "group.html",
        "title": "group",
        "type": "module"
      },
      {
        "path": "html_portal.html",
        "id": "html_portal.html",
        "title": "html_portal",
        "type": "module"
      },
      {
        "path": "item.html",
        "id": "item.html",
        "title": "item",
        "type": "module"
      },
      {
        "path": "iterate.html",
        "id": "iterate.html",
        "title": "iterate",
        "type": "module"
      },
      {
        "path": "layer.html",
        "id": "layer.html",
        "title": "layer",
        "type": "module"
      },
      {
        "path": "lazy.html",
        "id": "lazy.html",
        "title": "lazy",
        "type": "module"
      },
      {
        "path": "map.html",
        "id": "map.html",
        "title": "map",
        "type": "module"
      },
      {
        "path": "match.html",
        "id": "match.html",
        "title": "match",
        "type": "module"
      },
      {
        "path": "path.html",
        "id": "path.html",
        "title": "path",
        "type": "module"
      },
      {
        "path": "point_text.html",
        "id": "point_text.html",
        "title": "point_text",
        "type": "module"
      },
      {
        "path": "project.html",
        "id": "project.html",
        "title": "project",
        "type": "module"
      },
      {
        "path": "raster.html",
        "id": "raster.html",
        "title": "raster",
        "type": "module"
      },
      {
        "path": "shape.html",
        "id": "shape.html",
        "title": "shape",
        "type": "module"
      },
      {
        "path": "symbol_item.html",
        "id": "symbol_item.html",
        "title": "symbol_item",
        "type": "module"
      },
      {
        "path": "template.html",
        "id": "template.html",
        "title": "template",
        "type": "module"
      },
      {
        "path": "tool.html",
        "id": "tool.html",
        "title": "tool",
        "type": "module"
      },
      {
        "path": "until.html",
        "id": "until.html",
        "title": "until",
        "type": "module"
      },
      {
        "path": "value.html",
        "id": "value.html",
        "title": "value",
        "type": "module"
      },
      {
        "path": "when.html",
        "id": "when.html",
        "title": "when",
        "type": "module"
      }
    ],
    "std": [
      {
        "path": "arrays.html",
        "id": "arrays.html",
        "title": "arrays",
        "type": "module"
      },
      {
        "path": "async_result.html",
        "id": "async_result.html",
        "title": "async_result",
        "type": "module"
      },
      {
        "path": "async.html",
        "id": "async.html",
        "title": "async",
        "type": "module"
      },
      {
        "path": "booleans.html",
        "id": "booleans.html",
        "title": "booleans",
        "type": "module"
      },
      {
        "path": "equals.html",
        "id": "equals.html",
        "title": "equals",
        "type": "module"
      },
      {
        "path": "functions.html",
        "id": "functions.html",
        "title": "functions",
        "type": "module"
      },
      {
        "path": "json.html",
        "id": "json.html",
        "title": "json",
        "type": "module"
      },
      {
        "path": "match.html",
        "id": "match.html",
        "title": "match",
        "type": "module"
      },
      {
        "path": "maybe.html",
        "id": "maybe.html",
        "title": "maybe",
        "type": "module"
      },
      {
        "path": "nel.html",
        "id": "nel.html",
        "title": "nel",
        "type": "module"
      },
      {
        "path": "newtype.html",
        "id": "newtype.html",
        "title": "newtype",
        "type": "module"
      },
      {
        "path": "objects.html",
        "id": "objects.html",
        "title": "objects",
        "type": "module"
      },
      {
        "path": "option.html",
        "id": "option.html",
        "title": "option",
        "type": "module"
      },
      {
        "path": "ord.html",
        "id": "ord.html",
        "title": "ord",
        "type": "module"
      },
      {
        "path": "reg_exps.html",
        "id": "reg_exps.html",
        "title": "reg_exps",
        "type": "module"
      },
      {
        "path": "result.html",
        "id": "result.html",
        "title": "result",
        "type": "module"
      },
      {
        "path": "strings.html",
        "id": "strings.html",
        "title": "strings",
        "type": "module"
      },
      {
        "path": "uuid.html",
        "id": "uuid.html",
        "title": "uuid",
        "type": "module"
      },
      {
        "path": "validation.html",
        "id": "validation.html",
        "title": "validation",
        "type": "module"
      },
      {
        "path": "types/assert.html",
        "id": "types/assert.html",
        "title": "types/assert",
        "type": "module"
      },
      {
        "path": "types/differentiate.html",
        "id": "types/differentiate.html",
        "title": "types/differentiate",
        "type": "module"
      },
      {
        "path": "types/functions.html",
        "id": "types/functions.html",
        "title": "types/functions",
        "type": "module"
      },
      {
        "path": "types/generic.html",
        "id": "types/generic.html",
        "title": "types/generic",
        "type": "module"
      },
      {
        "path": "types/index_type.html",
        "id": "types/index_type.html",
        "title": "types/index_type",
        "type": "module"
      },
      {
        "path": "types/objects.html",
        "id": "types/objects.html",
        "title": "types/objects",
        "type": "module"
      },
      {
        "path": "types/tuples.html",
        "id": "types/tuples.html",
        "title": "types/tuples",
        "type": "module"
      }
    ],
    "store": [
      {
        "path": "emitter.html",
        "id": "emitter.html",
        "title": "emitter",
        "type": "module"
      },
      {
        "path": "listener.html",
        "id": "listener.html",
        "title": "listener",
        "type": "module"
      },
      {
        "path": "observable.html",
        "id": "observable.html",
        "title": "observable",
        "type": "module"
      },
      {
        "path": "property.html",
        "id": "property.html",
        "title": "property",
        "type": "module"
      },
      {
        "path": "reducer.html",
        "id": "reducer.html",
        "title": "reducer",
        "type": "module"
      },
      {
        "path": "store.html",
        "id": "store.html",
        "title": "store",
        "type": "module"
      }
    ]
  }
}